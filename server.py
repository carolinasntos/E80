import mesa
from model import Environment, Bot, Box, Goal, Pared, Camion, Bateria

from mesa.visualization.modules import CanvasGrid
from mesa.visualization.ModularVisualization import ModularServer

# Definir colores espec√≠ficos para los bots seg√∫n su tipo de ruta
SHELF_COLOR = "blue"   # Color para los robots con rutas shelf_paths
BELT_COLOR = "green"   # Color para los robots con rutas belt_paths

def agent_portrayal(agent):
    if isinstance(agent, Bot):
        # Asigna color seg√∫n el tipo de ruta que sigue el robot
        if agent.role == "shelf":
            color = SHELF_COLOR
        elif agent.role == "belt":
            color = BELT_COLOR
        else:
            color = "black"  # Color predeterminado si no tiene rol
        
        return {
            "Shape": "circle", 
            "Filled": "false", 
            "Color": color, 
            "Layer": 1, 
            "r": 1.0,
            "text": "ü§ñ", 
            "text_color": "black"
        }
    elif isinstance(agent, Box):
        return {"Shape": "rect", "Filled": "true", "Layer": 0, "w": 0.9, "h": 0.9, "text_color": "Black",
                "Color": "moccasin", "text": "üì¶"}
    elif isinstance(agent, Goal):
        return {"Shape": "rect", "Filled": "true", "Layer": 0, "w": 1, "h": 1, "text_color": "Black",
                "Color": "White", "text": "Ô∏è‚õ≥Ô∏è"}
    elif isinstance(agent, Pared):
        return {"Shape": "rect", "Filled": "true", "Layer": 0, "w": 0.9, "h": 0.9, "text_color": "Black",
                "Color": "Gray", "text": ""}
    elif isinstance(agent, Camion):
        return {"Shape": "rect", "Filled": "true", "Layer": 0, "w": 0.9, "h": 0.9, "text_color": "Black",
                "Color": "#008000", "text": "üöõ"}
    elif isinstance(agent, Bateria):
        return {"Shape": "rect", "Filled": "true", "Layer": 0, "w": 0.9, "h": 0.9, "text_color": "Black",
                "Color": "aquamarine", "text": "üîã"}
    else:
        return {"Shape": "rect", "Filled": "true", "Layer": 0, "w": 0.9, "h": 0.9, "text_color": "Black",
                "Color": "white", "text": ""}

"""
# Definir ubicaciones iniciales para los robots
initial_positions = [
    (4, 15),  # Robot 1 (shelf_paths)
    (4, 14),  # Robot 2 (shelf_paths)
    (4, 13),  # Robot 3 (shelf_paths)
    (1, 12),  # Robot 4 (belt_paths)
    (2, 12),   # Robot 5 (belt_paths)
    (3, 12)    # Robot 6 (belt_paths)
]

#Rutas iniciales para los robots

initial_shelf_routes = [
    #Robot 1
    #[(5, 15), (5, 17), (14, 17),(5, 17), (5, 11), (4, 11), (4, 8)],  #E1
    [(5, 15), (5, 16), (5, 17), (6, 17), (7, 17), (8, 17), (9, 17), (10, 17), (11, 17), (12, 17), (13, 17), (14, 17), (13, 17), (12, 17), (11, 17), (10, 17), (9, 17), (8, 17), (7, 17), (6, 17), (5, 17), (5, 16), (5, 15), (5, 14), (5, 13), (5, 12), (5, 11), (4, 11), (4, 10), (4, 9), (4, 8)]
    
    #Robot 2
    #[(5, 14), (6, 14), (6, 13),(15, 13),(5, 13), (5, 11), (4, 11), (4, 8)], #E3
    [(5, 14), (6, 14), (6, 13), (7, 13), (8, 13), (9, 13), (10, 13), (11, 13), (12, 13), (13, 13), (14, 13), (15, 13), (14, 13), (13, 13), (12, 13), (11, 13), (10, 13), (9, 13), (8, 13), (7, 13), (6, 13), (5, 13), (5, 12), (5, 11), (4, 11), (4, 10), (4, 9), (4, 8)]
    
    #Robot 3
    #[(5, 13), (5, 9), (8, 9), (8, 2), (12, 2), (8, 2), (8, 8),(6, 8), (4, 8)]  #E8
    [(5, 13), (5, 12), (5, 11), (5, 10), (5, 9), (6, 9), (7, 9), (8, 9), (8, 8), (8, 7), (8, 6), (8, 5), (8, 4), (8, 3), (8, 2), (9, 2), (10, 2), (11, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (7, 8), (6, 8), (5, 8), (4, 8)]
]
    # Rutas de Bots que se mueven hacia las bandas transportadoras
initial_belt_routes = [
    #Robot 4 12,5
    #[(1, 11), (1, 8),(2, 8), (2, 9), (10, 9), (10, 6), (13, 6), (9, 6), (9, 10), (1, 10), (1, 8)], #E6
    [(1, 11), (1, 10), (1, 9), (1, 8), (2, 8), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9), (9, 9), (10, 9), (10, 8), (10, 7), (10, 6), (11, 6), (12, 6), (13, 6), (12, 6), (11, 6), (10, 6), (9, 6), (9, 7), (9, 8), (9, 9), (9, 10), (8, 10), (7, 10), (6, 10), (5, 10), (4, 10), (3, 10), (2, 10), (1, 10), (1, 9), (1, 8)],
    
    #Robot 5 ir al E2
    #[(2, 11), (1, 11), (1, 8), (3, 8), (3, 9), (12, 9), (9, 9), (9, 10), (1, 10), (1, 8)], #E5
    #[(2,12),(2, 11), (1, 11), (1, 8), (3, 8), (3, 11), (6, 11), (6, 14), (10, 14), (5, 14), (5, 11), (3,11),(1,11), (1, 8)], #E2
    [(2, 12), (2, 11), (1, 11), (1, 10), (1, 9), (1, 8), (2, 8), (3, 8), (3, 9), (3, 10), (3, 11), (4, 11), (5, 11), (6, 11), (6, 12), (6, 13), (6, 14), (7, 14), (8, 14), (9, 14), (10, 14), (9, 14), (8, 14), (7, 14), (6, 14), (5, 14), (5, 13), (5, 12), (5, 11), (4, 11), (3, 11), (2, 11), (1, 11), (1, 10), (1, 9), (1, 8)]
    
    #Robot 6
    #[(3, 12),(3, 12),(3, 11), (1, 11), (1, 8), (3, 8), (3, 10), (11, 10),(1, 10), (1, 8)]  #E4
    [(3, 12), (3, 12), (3, 11), (2, 11), (1, 11), (1, 10), (1, 9), (1, 8), (2, 8), (3, 8), (3, 9), (3, 10), (4, 10), (5, 10), (6, 10), (7, 10), (8, 10), (9, 10), (10, 10), (11, 10), (10, 10), (9, 10), (8, 10), (7, 10), (6, 10), (5, 10), (4, 10), (3, 10), (2, 10), (1, 10), (1, 9), (1, 8)]

]

##(1,8)

#14,17; 10,14; 15,13; 11,10; 12,9; 13,6; 12,5; 12,2
belt_paths = [
    [(1, 11), (5, 11), (5, 17), (14, 17), (6,17), (6, 11), (2,11), (1,11), (1,8)], #E1
    [(1,9), (8,9), (8,14),(10,14),(5,14),(5,10), (1,10), (1,8)], #E2
    [(1,10),(2,10), (8,10), (8,13), (15,13), (7,13),(7,10), (1,10), (1,8)], #E3
    [(1,10), (2,10), (11,10), (1,10), (1,8)], #E4
    [(1,9), (12,9), (1,9), (1,8)], #E5
    [(1,9), (8,9), (8,6), (13,6),(10,6), (10,9), (1,9), (1,8)], #E6
    [(1,9), (8,9), (8,5), (12,5),(9,5), (9,9), (1,9), (1,8)], #E7
    [(1,9), (8,9), (8,2), (12,2), (12,1), (8,1), (8,9), (1,9), (1,8)] #E8
]

##(4,8)
shelf_paths = [
    [(4,12),(6,12),(6,17),(14,17),(6,17),(6,8),(4,8)], #E1
    [(4,12),(7,12),(7,14),(10,14),(5,14),(5,10),(4,10),(4,8)], #E2
    [(4,9),(5,9),(5,13),(15,13),(5,13),(5,9),(4,9),(4,8)], #E3
    [(4,10),(11,10),(4,10),(4,8)], #E4
    [(4,9),(12,9),(4,9),(4,8)], #E5
    [(4,9),(10,9),(10,6),(13,6),(9,6),(9,8),(4,8)], #E6
    [(4,9),(10,9),(10,8),(10,5),(12,5),(10,5),(10,8),(4,8)], #E7
    [(4,9),(9,9),(9,2),(12,2),(12,1),(8,1),(8,8),(4,8)] #E8
]
"""
# Definir ubicaciones iniciales para los robots
initial_positions = [
    (4, 21),  # Robot 1 (shelf_paths)
    (4, 20),  # Robot 2 (shelf_paths)
    (4, 19),  # Robot 3 (shelf_paths)
    (1, 18),  # Robot 4 (belt_paths)
    (2, 18),   # Robot 5 (belt_paths)
    (3, 18)    # Robot 6 (belt_paths)
]

#Rutas iniciales para los robots
initial_shelf_routes = [
    #Robot 1 #E1
    #[(7,21),(7,23),(14,23),(14,24),(5,24),(5,12),(4,12),(4,10)],
    [(7,21), (7,22), (7,23), (8,23), (9,23), (10,23), (11,23), (12,23), (13,23), (14,23), (14,24), (13,24), (12,24), (11,24), (10,24), (9,24), (8,24), (7,24), (6,24), (5,24), (5,23), (5,22), (5,21), (5,20), (5,19), (5,18), (5,17), (5,16), (5,15), (5,14), (5,13), (5,12), (4,12), (4,11), (4,10)],
    
    #Robot 2 #E3
    #[(5,20),(5,18),(15,18),(15,17),(5,12),(4,12),(4,10)],
    [(5,20), (5,19), (5,18), (6,18), (7,18), (8,18), (9,18), (10,18), (11,18), (12,18), (13,18), (14,18), (15,18), (15,17), (14,17), (13,17), (12,17), (11,17), (10,17), (9,17), (8,17), (7,17), (6,17), (5,17), (5,16), (5,15), (5,14), (5,13), (5,12), (4,12), (4,11), (4,10)],
    
    #Robot 3 #E8
    #[(4,16),(8,16),(8,11),(9,11),(9,2),(16,2),(16,1),(8,1),(8,12),(4,12),(4,10)]
    [(4,16), (5,16), (6,16), (7,16), (8,16), (8,15), (8,14), (8,13), (8,12), (8,11), (9,11), (9,10), (9,9), (9,8), (9,7), (9,6), (9,5), (9,4), (9,3), (9,2), (10,2), (11,2), (12,2), (13,2), (14,2), (15,2), (16,2), (16,1), (15,1), (14,1), (13,1), (12,1), (11,1), (10,1), (9,1), (8,1), (8,2), (8,3), (8,4), (8,5), (8,6), (8,7), (8,8), (8,9), (8,10), (8,11), (8,12), (7,12), (6,12), (5,12), (4,12), (4,11), (4,10)]
    
]
    # Rutas de Bots que se mueven hacia las bandas transportadoras
initial_belt_routes = [
    #Robot 4 #E6
    #[(1,10),(3,10),(3,14),(9,14),(9,8),(13,8),(13,7),(8,7),(8,15),(1,15),(1,10)],
    [(1,10), (2,10), (3,10), (3,11), (3,12), (3,13), (3,14), (4,14), (5,14), (6,14), (7,14), (8,14), (9,14), (9,13), (9,12), (9,11), (9,10), (9,9), (9,8), (10,8), (11,8), (12,8), (13,8), (13,7), (12,7), (11,7), (10,7), (9,7), (8,7), (8,8), (8,9), (8,10), (8,11), (8,12), (8,13), (8,14), (8,15), (7,15), (6,15), (5,15), (4,15), (3,15), (2,15), (1,15), (1,14), (1,13), (1,12), (1,11), (1,10)],
    
    #Robot 5 ir al E2
    #[(2,17),(1,17),(1,10),(3,10),(3,14),(6,14),(6,19),(10,19),(10,20),(5,20),(5,15),(1,15),(1,10)],
    [(2,17), (1,17), (1,16), (1,15), (1,14), (1,13), (1,12), (1,11), (1,10), (2,10), (3,10), (3,11), (3,12), (3,13), (3,14), (4,14), (5,14), (6,14), (6,15), (6,16), (6,17), (6,18), (6,19), (7,19), (8,19), (9,19), (10,19), (10,20), (9,20), (8,20), (7,20), (6,20), (5,20), (5,19), (5,18), (5,17), (5,16), (5,15), (4,15), (3,15), (2,15), (1,15), (1,14), (1,13), (1,12), (1,11), (1,10)],
    
    #Robot 6  #E4
    #[(3,17),(1,17),(1,10),(3,10),(3,14),(11,14),(11,13),(8,13),(8,15),(1,15),(1,10)]
    [(3,17), (2,17), (1,17), (1,16), (1,15), (1,14), (1,13), (1,12), (1,11), (1,10), (2,10), (3,10), (3,11), (3,12), (3,13), (3,14), (4,14), (5,14), (6,14), (7,14), (8,14), (9,14), (10,14), (11,14), (11,13), (10,13), (9,13), (8,13), (8,14), (8,15), (7,15), (6,15), (5,15), (4,15), (3,15), (2,15), (1,15), (1,14), (1,13), (1,12), (1,11), (1,10)]
]

#12,5; 12,2; 13,8; 12,11;; 11, 14; 15,17;; 10,20; 14,29

belt_paths = [
    #[(3,10),(3,14),(6,14),(6,23),(14,23),(14,24),(5,24),(5,15),(1,15),(1,10)],
    [(2,10),(3,10), (3,11), (3,12), (3,13), (3,14), (4,14), (5,14), (6,14), (6,15), (6,16), (6,17), (6,18), (6,19), (6,20), (6,21), (6,22), (6,23), (7,23), (8,23), (9,23), (10,23), (11,23), (12,23), (13,23), (14,23), (14,24), (13,24), (12,24), (11,24), (10,24), (9,24), (8,24), (7,24), (6,24), (5,24), (5,23), (5,22), (5,21), (5,20), (5,19), (5,18), (5,17), (5,16), (5,15), (4,15), (3,15), (2,15), (1,15), (1,14), (1,13), (1,12), (1,11), (1,10)],
    
    #[(3,10,),(3,14),(6,14),(6,19),(10,19),(10,20),(5,20),(5,15),(1,15),(1,10)],
    [(2,10),(3,10), (3,11), (3,12), (3,13), (3,14), (4,14), (5,14), (6,14), (6,15), (6,16), (6,17), (6,18), (6,19), (7,19), (8,19), (9,19), (10,19), (10,20), (9,20), (8,20), (7,20), (6,20), (5,20), (5,19), (5,18), (5,17), (5,16), (5,15), (4,15), (3,15), (2,15), (1,15), (1,14), (1,13), (1,12), (1,11), (1,10)],
    
    #[(3,10,),(3,14),(6,14),(6,18),(15,18),(15,17),(5,17),(5,15),(1,15),(1,10)] 
    [(2,10),(3,10), (3,11), (3,12), (3,13), (3,14), (4,14), (5,14), (6,14), (6,15), (6,16), (6,17), (6,18), (7,18), (8,18), (9,18), (10,18), (11,18), (12,18), (13,18), (14,18), (15,18), (15,17), (14,17), (13,17), (12,17), (11,17), (10,17), (9,17), (8,17), (7,17), (6,17), (5,17), (5,16), (5,15), (4,15), (3,15), (2,15), (1,15), (1,14), (1,13), (1,12), (1,11), (1,10)]
]

##(4,8)
shelf_paths = [
     #[(9,10),(9,2),(16,2),(16,1),(8,1),(8,12),(4,12),(4,10)],
     [(5,10),(6,10),(7,10),(8,10),(9,10), (9,9), (9,8), (9,7), (9,6), (9,5), (9,4), (9,3), (9,2), (10,2), (11,2), (12,2), (13,2), (14,2), (15,2), (16,2), (16,1), (15,1), (14,1), (13,1), (12,1), (11,1), (10,1), (9,1), (8,1), (8,2), (8,3), (8,4), (8,5), (8,6), (8,7), (8,8), (8,9), (8,10), (8,11), (8,12), (7,12), (6,12), (5,12), (4,12), (4,11), (4,10)],
     
     #[(9,10),(9,6),(14,6),(14,5),(8,5),(8,12),(4,12),(4,10)],
     [(5,10),(6,10),(7,10),(8,10),(9,10), (9,9), (9,8), (9,7), (9,6), (10,6), (11,6), (12,6), (13,6), (14,6), (14,5), (13,5), (12,5), (11,5), (10,5), (9,5), (8,5), (8,6), (8,7), (8,8), (8,9), (8,10), (8,11), (8,12), (7,12), (6,12), (5,12), (4,12), (4,11), (4,10)],

     
     #[(9,10),(9,8),(13,8),(13,7),(8,7),(8,12),(4,12),(4,10)]
     [(5,10),(6,10),(7,10),(8,10),(9,10), (9,9), (9,8), (10,8), (11,8), (12,8), (13,8), (13,7), (12,7), (11,7), (10,7), (9,7), (8,7), (8,8), (8,9), (8,10), (8,11), (8,12), (7,12), (6,12), (5,12), (4,12), (4,11), (4,10)]

     #[(,),(,),(),(),(),(),(),(),(),(),(),(),(),(),()] 
]

grid = mesa.visualization.CanvasGrid(agent_portrayal, 20, 26, 600, 700)

server = ModularServer(
    Environment,
    [grid],
    "Warehouse Robots",
    {"width": 20, "height": 26, "shelf_paths": shelf_paths, "belt_paths": belt_paths, "initial_positions": initial_positions, "initial_shelf_routes": initial_shelf_routes, "initial_belt_routes": initial_belt_routes}
)

server.port = 8521
server.launch()